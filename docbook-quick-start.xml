<?xml version="1.0" encoding="utf-8"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink">

  <info>
    <title>DocBook Quick Start</title>
    <subtitle>Up and Running with DocBook</subtitle>
    <authorgroup>
      <author>
        <orgname>LOCKSS Program, Stanford University Libraries</orgname>
      </author>
    </authorgroup>
  </info>

  <section xml:id="introduction">

    <title>Introduction</title>

    <para>
      <link xlink:href="http://docbook.org/">DocBook</link> version 5.0 is an
      XML language standardized by OASIS that describes documents such as
      articles and books. Tools exist that can translate DocBook input into
      intermediary formats like XSL Formatting Objects (XSL-FO) or output
      formats like PDF, PostScript, <command>man</command> pages, HTML Web
      sites, and more. This document describes a basic set of DocBook features
      that can be used to produce documentation and other technical documents.
    </para>

    <section xml:id="introduction-usingthelockssdocbookpackage">

      <title>Using the <package>lockss-docbook</package> Package</title>

      <para>
        The <link xlink:href="http://www.lockss.org/">LOCKSS Team</link> has
        bundled up a tool chain to process DocBook documents into PDF documents
        using XSL Formatting Objects (XSL-FO) and Apache FOP 2.1. This
        <package>lockss-docbook</package> package can be found on GitHub at
        <link xlink:href="https://github.com/lockss/lockss-docbook" />.
      </para>
      <para>
        To use it, you will need Java 6 or better and <command>git</command>.
      </para>
      <procedure>
        <step>
          <para>
            Clone the <package>lockss-docbook</package> repository:
          </para>
          <literallayout><userinput>git clone https://github.com/lockss/lockss-docbook</userinput></literallayout>
        </step>
        <step>
          <para>
            Invoke <command>makedoc</command> (<filename>lockss-docbook/bin/makedoc</filename>) with the <option>-pdf</option> option on any number of DocBook XML files, which will generate PDF files with corresponding names:
          </para>
          <literallayout><userinput>makedoc -pdf <replaceable>myfile.xml</replaceable></userinput></literallayout>
        </step>
      </procedure>

    </section>

  </section>

  <section xml:id="documentstructure">

    <title>Document Structure</title>

    <para>
      This section presents the basic structure of a DocBook document:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          A preamble
        </para>
      </listitem>
      <listitem>
        <para>
          A top-level element
        </para>
      </listitem>
      <listitem>
        <para>
          The top-level element's <tag>info</tag> section (title, optional
          subtitle, author information)
        </para>
      </listitem>
      <listitem>
        <para>
          Sections
        </para>
      </listitem>
    </itemizedlist>

    <section xml:id="documentstructure-preamble">
    
      <title>Preamble</title>

      <para>
        All DocBook documents begin with an XML preamble:
      </para>
      <programlisting><![CDATA[<?xml version="1.0" encoding="utf-8"?>]]></programlisting>
    
    </section>
    
    <section xml:id="documentstructure-toplevelelement">
    
      <title>Top-Level Element</title>

      <para>
        You have a choice of top-level elements:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <tag>article</tag>: a single article or document (most likely)
          </para>
        </listitem>
        <listitem>
          <para>
            <tag>book</tag>: a book; a book consists of <tag>chapter</tag> and
            <tag>part</tag> elements (and a <tag>part</tag> element consists of
            <tag>chapter</tag> elements)
          </para>
        </listitem>
        <listitem>
          <para>
            <tag>set</tag>: a collection of books; a <tag>set</tag> element
            consists of <tag>book</tag> elements
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Whichever top-level element you choose (say <tag>article</tag>), declare
        the following namespaces:
      </para>
      <programlisting><![CDATA[
<article xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink">
  ...
</article>
]]></programlisting>
      <para>
        The top-level tags <tag>set</tag>, <tag>book</tag>, <tag>part</tag>,
        <tag>chapter</tag> and <tag>article</tag> each begin with an
        <tag>info</tag> stanza with a rich vocabulary to describe bilbiographic
        metadata (title and subtitle, dates, publisher information...) and to
        attribute names, contact information and organizational affiliations to
        various kinds of contributors (author, collaborator, editor...). Without
        going into detail, the essential is to provide:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            A title with the <tag>title</tag> element
          </para>
        </listitem>
        <listitem>
          <para>
            An optional subtitle with the <tag>subtitle</tag> element
          </para>
        </listitem>
        <listitem>
          <para>
            An author group with the <tag>authorgroup</tag> element, containing
            one or more <tag>author</tag> elements. At the simplest level, an
            <tag>author</tag> element contains either the name of an
            organizational author with the <tag>orgname</tag> element or the
            name of an individual author with the <tag>personname</tag> element.
          </para>
        </listitem>
      </itemizedlist>
      <example>
        <title><tag>info</tag> and <tag>authorgroup</tag> example</title>
        <programlisting><![CDATA[
<info>
  <title>Main Title</title>
  <subtitle>The Subtitle Goes Here</subtitle>
  <authorgroup>
    <author>
      <personname>John H. Smith</personname>
    </author>
    <author>
      <orgname>The MegaDocBook Foundation</orgname>
    </author>
  </authorgroup>
</info>
]]></programlisting>
      </example>
      
    </section>
    
    <section xml:id="documentstructure-sections">
    
      <title>Sections</title>    

      <para>
        The <tag>article</tag> and <tag>chapter</tag> elements are sub-divided
        into nested <code><![CDATA[<section>]]></code> elements that begin with a
        <tag>title</tag> element and optional <tag>subtitle</tag> element,
        followed by any number of content blocks:
      </para>
      <example>
        <title><tag>section</tag> example</title>
        <programlisting><![CDATA[
<section>
  <title>First Section</title>
  ...
  <section>
    <title>First Subsection</title>
    ...
  </section>
  <section>
    <title>Second Subsection</title>
    ...
  </section>
</section>
<section>
  <title>Second Section</title>
  ...
</section>
]]></programlisting>
      </example>
      <tip>
        <para>
          Alternatively, instead of arbitrarily-nestable <tag>section</tag>
          elements, you can use the directly-nestable elements <tag>sect1</tag>,
          <tag>sect2</tag>, <tag>sect3</tag>, <tag>sect4</tag> and
          <tag>sect5</tag>.
        </para>
      </tip>

    </section>

  </section>

  <section xml:id="essentialcontentblocks">

    <title>Essential Content Blocks</title>

    <para>
      Each section is then made up of content blocks like paragraphs, lists,
      verbatim text, asides, etc. DocBook provides a rich vocabulary of content
      structures. The most immediately useful ones are presented in this
      section:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Paragraphs (<tag>para</tag>)
        </para>
      </listitem>
      <listitem>
        <para>
          Lists (<tag>itemizedlist</tag>, <tag>orderedlist</tag>)
        </para>
      </listitem>
      <listitem>
        <para>
          Verbatim text (<tag>programlisting</tag>, <tag>literallayout</tag>)
        </para>
      </listitem>
      <listitem>
        <para>
          Asides (<tag>caution</tag>, <tag>important</tag>, <tag>note</tag>,
          <tag>tip</tag>, <tag>warning</tag>)
        </para>
      </listitem>
    </itemizedlist>
    
    <section xml:id="essentialcontentblocks-paragraphs">
    
      <title>Paragraphs (<tag>para</tag>)</title>
      
      <para>
        The plainest content block is a paragraph, marked up with the
        <tag>para</tag> tag. 
      </para>
      <example>
        <title><tag>para</tag> example</title>
        <programlisting><![CDATA[
<para>
  This is a paragraph.
</para>
<para>
  This is another paragraph.
</para>
]]></programlisting>
        <blockquote>
          <para>
            This is a paragraph.
          </para>
          <para>
            This is another paragraph.
          </para>
        </blockquote>
      </example>
    
    </section>

    <section xml:id="essentialcontentblocks-lists">
    
      <title>Lists (<tag>itemizedlist</tag>, <tag>orderedlist</tag>)</title>
      
      <para>
        DocBook offers both bullet (unordered) lists with
        <tag>itemizedlist</tag> and numbered (ordered) lists with
        <tag>orderedlist</tag>. These lists are made up of <tag>listitem</tag>
        elements that contain other content blocks -- as little as a paragraph. 
      </para>
      <example>
        <title><tag>itemizedlist</tag> example</title>
        <programlisting><![CDATA[
<itemizedlist>
  <listitem>
    <para>
      First bullet in the list.
    </para>
  </listitem>
  <listitem>
    <para>
      Second bullet in the list.
    </para>
  </listitem>
</itemizedlist>
]]></programlisting>
        <blockquote>
          <itemizedlist>
            <listitem>
              <para>
                First bullet in the list.
              </para>
            </listitem>
            <listitem>
              <para>
                Second bullet in the list.
              </para>
            </listitem>
          </itemizedlist>
        </blockquote>
      </example>
    
    </section>
    
    <section xml:id="essentialcontentblocks-verbatimtext">
    
      <title>Verbatim text (<tag>programlisting</tag>,
      <tag>literallayout</tag>)</title>
      
      <para>
        Technical documentation often requires the presentation of verbatim
        text, including the content of files or sequences of computer commands,
        where whitespace and newlines matter. This is accomplished through two
        related tags, <tag>programlisting</tag> and <tag>literallayout</tag>.
        They differ only in that <tag>literallayout</tag> does not imply a
        change of font whereas <tag>programlisting</tag> recommends a monospace
        font rendition.
      </para>
      <example>
        <title><tag>programlisting</tag> example</title>
        <programlisting><![CDATA[
<programlisting>#!/bin/sh
echo "This is a shell script"
exit 1</programlisting>
]]></programlisting>
        <blockquote>
          <programlisting>#!/bin/sh
echo "This is a shell script"
exit 1</programlisting>
        </blockquote>
      </example>
      <para>
        Note the placement of newlines in the example above. Adding newlines
        after <tag class="starttag">programlisting</tag> and before
        <tag class="endtag">programlisting</tag> is perfectly valid and is
        probably more legible in DocBook source, but may result in additional
        blank lines when rendered.
      </para>
      <caution>
        <para>
          The interpretation of inline markup is not suspended inside
          <tag>programlisting</tag> and <tag>literallayout</tag> and the input
          mechanism is still XML, so you have to encode less-than, greater-than
          and ampersand as <code>&amp;lt;</code>, <code>&amp;gt;</code> and
          <code>&amp;amp;</code> respectively.
        </para>
      </caution>
      <tip>
        <para>
          This will quickly become tedious if the verbatim text is XML or if you
          need to be able to copy and paste sections of verbatim text. You can
          escape all or part of the contents with <code>&lt;![CDATA[</code> and
          <code>]]&gt;</code>.
        </para>
        <example>
          <title><tag>programlisting</tag> example with CDATA section</title>
          <programlisting>&lt;programlisting&gt;&lt;![CDATA[&lt;myxml&gt;
  &lt;fragment&gt;This is an XML fragment&lt;/fragment&gt;
&lt;/myxml&gt;]]&gt;&lt;/programlisting&gt;</programlisting>
          <blockquote>
            <programlisting><![CDATA[<myxml>
  <fragment>This is an XML fragment</fragment>
</myxml>]]></programlisting>
          </blockquote>
        </example>
      </tip>          
      
    </section>
    
    <section xml:id="essentialcontentblocks-asides">
    
      <title>Asides (<tag>caution</tag>, <tag>important</tag>, <tag>note</tag>,
      <tag>tip</tag>, <tag>warning</tag>)</title>
      
      <para>
        The five tags <tag>caution</tag>, <tag>important</tag>, <tag>note</tag>,
        <tag>tip</tag> and <tag>warning</tag> delimit an aside to the reader
        that is typically rendered offset from the main body of text and with a
        little icon.
      </para>
      <example>
        <title><tag>important</tag> example</title>
        <programlisting><![CDATA[
<important>
  <para>
    This is important!
  </para>
</important>
]]></programlisting>
        <blockquote>
          <important>
            <para>
              This is important!
            </para>
          </important>
        </blockquote>
      </example>
    
    </section>

  </section>
  
  <section xml:id="essentialinlinemarkup">
  
    <title>Essential Inline Markup</title>

    <para>
      DocBook defines a rich variety of inline markup, which can result in a
      visual effect when rendered. The most immediately useful ones are
      introduced in this section:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Bold, italics, underline, strikethrough
        </para>
      </listitem>
      <listitem>
        <para>
          Monospace
        </para>
      </listitem>
      <listitem>
        <para>
          Subscript and superscript
        </para>
      </listitem>
    </itemizedlist>

    <section xml:id="essentialinlinemarkup-fonteffects">
    
      <title>Font Effects (<tag>emphasis</tag>)</title>
      
      <para>
        DocBook describes the structure of text, not so much its look and feel,
        so the <tag>emphasis</tag> tag is only guaranteed to result in some
        emphasis, not necessarily boldface or italics specifically. Most
        implementations show emphasis with italics by default, and the
        <tag class="attribute">role</tag> attribute can be set to one of
        <tag class="attvalue">bold</tag> (or
        <tag class="attvalue">strong</tag>),
        <tag class="attvalue">underline</tag> or
        <tag class="attvalue">strikethrough</tag> to exhibit the corresponding
        font effect.
      </para>
      <para>
        That said, the <package>lockss-docbook</package> package chooses to
        implement emphasis with boldface by default, and implements an extension
        whereby the <tag class="attribute">role</tag> attribute can be set to
        <tag class="attvalue">italic</tag>.
      </para>
      <example>
        <title><tag>emphasis</tag> examples</title>
        <programlisting><![CDATA[
<para>
  <emphasis>default</emphasis> (lockss-docbook customization)
</para>
<para>
  <emphasis role="bold">bold</emphasis>,
  <emphasis role="strong">strong</emphasis>
</para>
<para>
  <emphasis role="italic">italic</emphasis> (lockss-docbook extension)
</para>
<para>
  <emphasis role="underline">underline</emphasis>
</para>
<para>
  <emphasis role="strikethrough">strikethrough</emphasis>
</para>
]]></programlisting>
        <blockquote>
          <para>
            <emphasis>default</emphasis> (lockss-docbook customization)
          </para>
          <para>
            <emphasis role="bold">bold</emphasis>,
            <emphasis role="strong">strong</emphasis>
          </para>
          <para>
            <emphasis role="italic">italic</emphasis> (lockss-docbook extension)
          </para>
          <para>
            <emphasis role="underline">underline</emphasis>
          </para>
          <para>
            <emphasis role="strikethrough">strikethrough</emphasis>
          </para>
        </blockquote>
      </example>
      
    </section>
    
    <section xml:id="essentialinlinemarkup-monospace">
    
      <title>Monospace (<tag>code</tag>, <tag>tag</tag>)</title>
    
      <para>
        DocBook offers rich markup constructs for technical documentation. The
        most important construct is the <tag>code</tag> tag, which causes text
        to be styled in a monospace font.
      </para>
      <example>
        <title><tag>code</tag> example</title>
        <programlisting><![CDATA[
<para>
  Type <code>exit</code> to quit.
</para>
]]></programlisting>
        <blockquote>
          <para>
            Type <code>exit</code> to quit.
          </para>
        </blockquote>
      </example>
      <para>
        There are numerous other constructs for computer-related markup, but one
        that can be singled out for being particularly useful is the
        <tag>tag</tag> tag, which is to style the name of XML tags.
      </para>
      <note>
        <para>
          Standard DocBook implementations simply style the text of the
          <tag>tag</tag> tag in monospace by default, so
          <code><![CDATA[<tag>foo</tag>]]></code> results in <code>foo</code>,
          but the <package>lockss-docbook</package> package adds the opening and
          closing angle brackets so it renders as <tag>foo</tag>. Normally this
          would require the more specific
          <code><![CDATA[<tag class="starttag">foo</tag>]]></code>.
        </para>
      </note>
    
    </section>
    
    <section xml:id="essentialinlinemarkup-subscriptsandsuperscripts">
    
      <title>Subscripts and Superscripts (<tag>subscript</tag>,
      <tag>superscript</tag>)</title>
    
      <para>
        The <tag>subscript</tag> and <tag>superscript</tag> tags can be used to
        display subscripts and superscripts.
      </para>
      <example>
        <title><tag>subscript</tag> and <tag>superscript</tag> example</title>
        <programlisting><![CDATA[
<para>
  Let y<subscript>0</subscript> = x<superscript>2</superscript>.
</para>
]]></programlisting>
        <blockquote>
          <para>
            Let y<subscript>0</subscript> = x<superscript>2</superscript>.
          </para>
        </blockquote>
      </example>
    
    </section>
    
  </section>

  <section xml:id="cookbook">

    <title>Cookbook</title>

    <para>
      The basic constructs presented above are more than enough to write
      professional-looking technical documentation of all kinds. This section
      introduces constructs and techniques for even richer presentation.
    </para>

    <section xml:id="cookbook-userinput">
    
      <title>User Input</title>
      
      <para>
        Instead of generic <tag>code</tag> tags, you can use
        <tag>userinput</tag> to represent commands or data entered by the user,
        and <tag>replaceable</tag> to represent portions that are meant as
        placeholders the user needs to replace with the desired text.
      </para>
      <example>
        <title><tag>userinput</tag> and <tag>replaceable</tag> example</title>
        <programlisting><![CDATA[
<para>
  Type <userinput>touch <replaceable>MYFILE</replaceable></userinput>,
  where <replaceable>MYFILE</replaceable> is the file name from step 2.
</para>
]]></programlisting>
        <blockquote>
          <para>
            Type <userinput>touch <replaceable>MYFILE</replaceable></userinput>,
            where <replaceable>MYFILE</replaceable> is the file name from step 2.
          </para>
        </blockquote>
      </example>
   
    </section>

    <section xml:id="cookbook-applicationoutput">
    
      <title>Application Output</title>
      
      <para>
        Instead of generic <tag>code</tag> tags, you can use
        <tag>computeroutput</tag> to represent data or messages output by
        applications.
      </para>
      <example>
        <title><tag>computeroutput</tag> example</title>
        <programlisting><![CDATA[
<para>
  An error is displayed: <computeroutput>No such file or
  directory</computeroutput>.
</para>
]]></programlisting>
        <blockquote>
          <para>
            An error is displayed: <computeroutput>No such file or
            directory</computeroutput>.
          </para>
        </blockquote>
      </example>
      <para>
        The <tag>screen</tag> block can be used to represent multiple lines of
        output conveniently, or to represent what the console might look like
        to a user.
      </para>
      <example>
        <title><tag>screen</tag> example</title>
        <programlisting><![CDATA[
<para>
  The output of <userinput>ls -l</userinput> is:
</para>
<screen>
total 8
dr-xr-xr-x 2 root ftp  4096 Sep 30  2015 ftp
drwxr-xr-x 2 root root 4096 Sep 30  2015 http
</screen>
]]></programlisting>
        <blockquote>
          <para>
            The output of <userinput>ls -l</userinput> is:
          </para>
          <screen>
total 8
dr-xr-xr-x 2 root ftp  4096 Sep 30  2015 ftp
drwxr-xr-x 2 root root 4096 Sep 30  2015 http
          </screen>
        </blockquote>
      </example>
   
    </section>

    <section xml:id="cookbook-consoletranscript">
    
      <title>Console Transcript</title>
      
      <para>
        A console transcript can be represented by simply copying and pasting
        the contents into a <tag>programlisting</tag> or <tag>screen</tag>
        block, but surrounding the user input lines with <tag>userinput</tag>
        creates a richer result. 
      </para>
      <example>
        <title>Console transcript example</title>
        <programlisting><![CDATA[
<programlisting>
$ <userinput>cd /log</userinput>
bash: cd: /log: No such file or directory
$ <userinput>cd /var</userinput>
$ <userinput>ls</userinput>
lock  log  mail  run  spool  tmp
</programlisting>
]]></programlisting>
        <blockquote>
          <programlisting>
$ <userinput>cd /log</userinput>
bash: cd: /log: No such file or directory
$ <userinput>cd /var</userinput>
$ <userinput>ls</userinput>
lock  log  mail  run  spool  tmp
          </programlisting>
        </blockquote>
      </example>
   
    </section>

    <section xml:id="cookbook-stepbystepinstructions">
    
      <title>Step-By-Step Instructions</title>
      
      <para>
        To lay out step-by-step instructions, you can use DocBook's
        <tag>procedure</tag> construct. A procedure consists of one or more
        <tag>step</tag> tags.
      </para>
      <para>
        By default a step is required, which is equivalent to setting its
        <tag class="attribute">performance</tag> attribute to
        <tag class="attvalue">required</tag>, or it can be marked optional,
        which requires the attribute value <tag class="attvalue">optional</tag>
        instead (and causes special rendering).
      </para>
      <para>
        A step is either terminal, in which case it consists of blocks of
        content (e.g. <tag>para</tag>), or a group of sequential sub-steps, in
        which case it consists of a <tag>substeps</tag> tag, or a choice of one
        alternative among several, in which case it consists of a
        <tag>stepalternatives</tag> tag. Both <tag>substeps</tag> and
        <tag>stepalternatives</tag> are simply containers of <tag>step</tag>
        tags, and have the same <tag class="attribute">performance</tag>
        attribute as the <tag>step</tag> tag to denote an optional grouping.
      </para>
      <example>
        <title><tag>procedure</tag> example</title>
        <programlisting><![CDATA[
<procedure>
  <step>
    <para>
      First step.
    </para>
  </step>
  <step>
    <para>
      Second step:  
    </para>
    <substeps>
      <step>
        <para>
          First this thing.
        </para>
      </step>
      <step performance="optional">
        <para>
          Maybe this thing.
        </para>
      </step>
      <step>
        <para>
          Finally this thing.
        </para>
      </step>
    </substeps>
  </step>
  <step>
    <para>
      Depending on your OS:
    </para>
    <stepalternatives>
      <step>
        <para>
          Do this ... if you use Linux.
        </para>
      </step>
      <step>
        <para>
          Do this ... if you use Windows.
        </para>
      </step>
      <step>
        <para>
          Do this ... if you use Mac OS.
        </para>
      </step>
    </stepalternatives>
  </step>
</procedure>
]]></programlisting>
        <blockquote>
          <procedure>
            <step>
              <para>
                First step.
              </para>
            </step>
            <step>
              <para>
                Second step:  
              </para>
              <substeps>
                <step>
                  <para>
                    First this thing.
                  </para>
                </step>
                <step performance="optional">
                  <para>
                    Maybe this thing.
                  </para>
                </step>
                <step>
                  <para>
                    Finally this thing.
                  </para>
                </step>
              </substeps>
            </step>
            <step>
              <para>
                Depending on your OS:
              </para>
              <stepalternatives>
                <step>
                  <para>
                    Do this ... if you use Linux.
                  </para>
                </step>
                <step>
                  <para>
                    Do this ... if you use Windows.
                  </para>
                </step>
                <step>
                  <para>
                    Do this ... if you use Mac OS.
                  </para>
                </step>
              </stepalternatives>
            </step>
          </procedure>
        </blockquote>
      </example>
      <tip>
        <para>
          DocBook offers an even more formal construct, the <tag>task</tag> tag.
          A task consists of a title (<tag>title</tag>), an optional summary
          (<tag>tasksummary</tag> containing content blocks), optional
          pre-requisites (<tag>taskprerequisites</tag> containing content blocks),
          a procedure (<tag>procedure</tag>), zero or more examples
          (<tag>example</tag> containing content blocks), and an optional
          follow-up section (<tag>taskrelated</tag> containing content blocks)
          which can be used for verification steps, next steps, references to
          external resources, etc.
        </para>
      </tip>
      
    </section>

    <section xml:id="cookbook-frequentlyaskedquestions">
    
      <title>Frequently-Asked Questions</title>
      
      <para>
        DocBook offers a construct for sets of questions and answers, as might
        often be needed to render a frequently-asked questions section in a
        document, in the <tag>qandaset</tag> tag. It consists of
        <tag>qandaentry</tag> tags, which can be grouped
        into <tag>qandadiv</tag> sections that begin with a <tag>title</tag>
        tag (and are nestable).
      </para>
      <para>
        The <tag>qandaset</tag> tag has a
        <tag class="attribute">defaultlabel</tag> attribute which determines how
        the set is rendered, either <tag class="attvalue">none</tag> for no
        decoration, or <tag class="attvalue">qanda</tag>
        for "Q:" and "A:" markers, or <tag class="attvalue">number</tag> for
        a numbered list.
      </para>
      <tip>
        <para>
          The default is <tag class="attvalue">number</tag>, which uses the
          current section label (e.g. 4.2) to generate numbered section labels
          (e.g. 4.2.1) and entry labels (e.g. 4.2.1.1). If this is cumbersome,
          using <tag class="attvalue">qanda</tag> is the simplest, or
          alternatively, using <tag class="attvalue">none</tag> and formatting
          each question differently than normal text, for instance with
          <tag>emphasis</tag>.
        </para>
      </tip>
      <para>
        A <tag>qandaentry</tag> tag contains a <tag>question</tag> tag, and zero
        or more <tag>answer</tag> tags, and <tag>question</tag> and
        <tag>answer</tag> tags contain blocks of content (e.g. <tag>para</tag>).
      </para>
      <example>
        <title><tag>qandaset</tag> example</title>
        <programlisting><![CDATA[
 <qandaset>
  <qandaentry>
    <question>
      <para>
        What is this document?
      </para>
    </question>
    <answer>
      <para>
        It's a DocBook primer. (See remark below.)
      </para>
    </answer>
  </qandaentry>
  <qandadiv>
    <title>Software</title>
    <qandaentry>
      <question>
        <para>
          Does it work on Linux?
        </para>
      </question>
      <answer>
        <para>
          Yes.
        </para>
      </answer>
    </qandaentry>
    <qandaentry>
      <question>
        <para>
          Does it work on the Mac?
        </para>
      </question>
      <answer>
        <para>
          Yes.
        </para>
      </answer>
    </qandaentry>
  </qandadiv>
</qandaset>       
]]></programlisting>
        <blockquote>
          <qandaset>
            <qandaentry>
              <question>
                <para>
                  What is this document?
                </para>
              </question>
              <answer>
                <para>
                  It's a DocBook primer. (See remark below.)
                </para>
              </answer>
            </qandaentry>
            <qandadiv>
              <title>Software</title>
              <qandaentry>
                <question>
                  <para>
                    Does it work on Linux?
                  </para>
                </question>
                <answer>
                  <para>
                    Yes.
                  </para>
                </answer>
              </qandaentry>
              <qandaentry>
                <question>
                  <para>
                    Does it work on the Mac?
                  </para>
                </question>
                <answer>
                  <para>
                    Yes.
                  </para>
                </answer>
              </qandaentry>
            </qandadiv>
          </qandaset>
        </blockquote>
        <note>
          <para>
            Typically, either all entries fall into a section, or none do, but
            note that if there is a mix, the standalone questions appear at the
            end, which is probably not what you intend. If you must have some
            entries fall outside of any section, creating a section for those
            entries is recommended as it enables you to put them in the intended
            place.
          </para>
        </note>
      </example>
      
    </section>

    <section xml:id="cookbook-definitionlist">
    
      <title>Definition List</title>
      
      <para>
        Among the various kinds of list constructs offered by DocBook is the
        <tag>variablelist</tag> tag, which is used to mark up a definition list
        (similar to HTML's <tag>dl</tag>). The <tag>variablelist</tag> tag
        consists of <tag>varlistentry</tag> tags; the latter consist of one or
        more <tag>term</tag> tags, and one <tag>listitem</tag> tag containing
        content blocks (e.g. <tag>para</tag>). 
      </para>
      <example>
        <title><tag>variablelist</tag> example</title>
        <programlisting><![CDATA[
<variablelist>
  <varlistentry>
    <term>Java</term>
    <listitem>
      <para>
        A programming language.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>HTML</term>
    <term>XHTML</term>
    <listitem>
      <para>
        Markup languages for the Web.
      </para>
    </listitem>
  </varlistentry>
</variablelist>
]]></programlisting>
        <blockquote>
          <variablelist>
            <varlistentry>
              <term>Java</term>
              <listitem>
                <para>
                  A programming language.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>HTML</term>
              <term>XHTML</term>
              <listitem>
                <para>
                  Markup languages for the Web.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </blockquote>
      </example>
      
    </section>

    <section xml:id="cookbook-commandsyntax">
    
      <title>Command Syntax</title>
      
      <para>
        DocBook offers many constructs to document the syntax of commands,
        scripts or programs, in manners similar to what might be seen in
        <command>man</command> pages or the <option>--help</option> message of
        tools.
      </para>
      <para>
        The grouping construct for a command synopsis is <tag>cmdsynopsis</tag>.
        It then contains a <tag>command</tag> tag for the name of the command,
        script or program, and zero or more <tag>arg</tag> tags for arguments
        and options, which can be grouped in nestable <tag>group</tag> tags.
        (Here "group" means "alternatives".)
      </para>
      <para>
        For simplicity's sake, the contents of the <tag>arg</tag> tag can simply
        be text, but the intent is for semantic markup, which can include the
        <tag>option</tag> tag for an option, the <tag>replaceable</tag> tag
        for a placeholder whose value is supplied by the user, or nested
        <tag>arg</tag> tags.
      </para>
      <para>
        The <tag>option</tag> tag does not explicitly cause the decoration of
        the option text because depending on the context it could be a single
        hyphen, a double hyphen, or a forward slash, or even other leading
        characters like a plus sign, so including these characters is up to the
        author.
      </para>
      <para>
        The <tag>arg</tag> and <tag>group</tag> tags have two optional
        attributes:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            The <tag class="attribute">choice</tag> attribute: either
            <tag class="attvalue">opt</tag> for an optional item (the default)
            decorated with curly braces, or <tag class="attvalue">req</tag> for
            a required item decorated with square brackets, or
            <tag class="attvalue">plain</tag> for an unadorned required item.
          </para>
        </listitem>
        <listitem>
          <para>
            The <tag class="attribute">rep</tag> attribute: either
            <tag class="attvalue">norepeat</tag> for a non-repeating item (the
            default) or <tag class="attvalue">repeat</tag> for a repeating item
            decorated with an ellipsis
         </para>
        </listitem>
      </itemizedlist>
      <tip>
        <para>
          Specifying an explicit <tag class="attribute">choice</tag> attribute
          on every <tag>arg</tag> and <tag>group</tag> tag is recommended.
        </para>
      </tip>
      <para>
        Also worth mentioning is the <tag class="emptytag">sbr</tag> empty tag,
        one of DocBook's rare explicit line breaks, which can occur in a
        <tag>cmdsynopsis</tag> block.
      </para>
      <example>
        <title><tag>cmdsynopsis</tag> with arguments</title>
        <programlisting><![CDATA[
<cmdsynopsis>
  <command>foo</command>
  <arg choice="plain"><replaceable>infile</replaceable></arg>
  <arg choice="plain"><replaceable>outfile</replaceable></arg>
  <arg choice="opt" rep="repeat"><replaceable>stylefile</replaceable></arg>
</cmdsynopsis>
]]></programlisting>
        <blockquote>
          <cmdsynopsis>
            <command>foo</command>
            <arg choice="plain"><replaceable>infile</replaceable></arg>
            <arg choice="plain"><replaceable>outfile</replaceable></arg>
            <arg choice="opt" rep="repeat"><replaceable>stylefile</replaceable></arg>
          </cmdsynopsis>
        </blockquote>
      </example>
      <example>
        <title><tag>cmdsynopsis</tag> with mutually exclusive options</title>
        <programlisting><![CDATA[
<cmdsynopsis>
  <command>bar</command>
  <group choice="opt">
    <arg choice="plain"><option>--help</option></arg>
    <arg choice="plain"><option>-h</option></arg>
  </group>
  <group choice="opt">
    <arg choice="plain"><option>-typea</option></arg>
    <arg choice="plain"><option>-typeb</option></arg>
    <arg choice="plain"><option>-typec</option></arg>
  </group>
  <arg choice="plain" rep="repeat"><replaceable>file</replaceable></arg>
</cmdsynopsis>
]]></programlisting>
        <blockquote>
          <cmdsynopsis>
            <command>bar</command>
            <group choice="opt">
              <arg choice="plain"><option>-h</option></arg>
              <arg choice="plain"><option>--help</option></arg>
            </group>
            <group choice="opt">
              <arg choice="plain"><option>-typea</option></arg>
              <arg choice="plain"><option>-typeb</option></arg>
              <arg choice="plain"><option>-typec</option></arg>
            </group>
            <arg choice="plain" rep="repeat"><replaceable>file</replaceable></arg>
          </cmdsynopsis>
        </blockquote>
      </example>
      <example>
        <title><tag>cmdsynopsis</tag> with options with arguments</title>
        <para>
          Options with arguments can be tricky. XSLT processors often treat
          whitespace between DocBook tags the same way you may be used to with
          HTML -- all consecutive whitespace (including newlines) is treated as
          a single space. This means you have to intentionally put an equal sign
          right next to the tag it goes with. This is shown below in the
          <option>--e1opt</option> option. Then there is the issue of options
          with a short and long form. Oftentimes the long form is separated from
          its argument by an equal sign, but the short form by a space (or even
          by no space at all). A suggested style is shown below with the
          <option>--e2opt</option> option. 
        </para>
        <programlisting><![CDATA[
<cmdsynopsis>
  <command>baz</command>
  <arg choice="opt"><option>--e1opt</option>=<replaceable>A</replaceable></arg>
  <arg choice="opt">
    <group choice="req">
      <arg choice="plain"><option>-E</option></arg>
      <arg choice="plain"><option>--e2opt</option></arg>
    </group>=<replaceable>C</replaceable>
  </arg>
  <arg choice="opt"><option>-s1opt</option> <replaceable>B</replaceable></arg>
  <arg choice="opt">
    <group choice="req">
      <arg choice="plain"><option>-S</option></arg>
      <arg choice="plain"><option>-s2opt</option></arg>
    </group> <replaceable>D</replaceable>
  </arg>
</cmdsynopsis>
]]></programlisting>
        <blockquote>
          <cmdsynopsis>
            <command>baz</command>
            <arg choice="opt"><option>--e1opt</option>=<replaceable>A</replaceable></arg>
            <arg choice="opt">
              <group choice="req">
                <arg choice="plain"><option>-E</option></arg>
                <arg choice="plain"><option>--e2opt</option></arg>
              </group>=<replaceable>C</replaceable>
            </arg>
            <arg choice="opt"><option>-s1opt</option> <replaceable>B</replaceable></arg>
            <arg choice="opt">
              <group choice="req">
                <arg choice="plain"><option>-S</option></arg>
                <arg choice="plain"><option>-s2opt</option></arg>
              </group> <replaceable>D</replaceable>
            </arg>
          </cmdsynopsis>
        </blockquote>
      </example>
      <example>
        <title><tag>cmdsynopsis</tag> with nested options</title>
        <para>
          Nested options can be tricky as well, because an argument with
          variable length (like a date/time specification) or one with a
          variable number of space-separated tokens are likely to be rendered
          the same:
        </para>
        <programlisting><![CDATA[
<cmdsynopsis>
  <command>qux</command>
  <arg choice="opt">+<replaceable>yyyy</replaceable
><arg choice="opt"><replaceable>mm</replaceable
><arg choice="opt"><replaceable>dd</replaceable
></arg></arg></arg>
  <arg choice="opt"><replaceable>volume</replaceable
> <arg choice="opt"><replaceable>issue</replaceable
> <arg choice="opt"><replaceable>page</replaceable
></arg></arg></arg>
</cmdsynopsis>
]]></programlisting>
        <blockquote>
          <cmdsynopsis>
            <command>qux</command>
            <arg choice="opt">+<replaceable>yyyy</replaceable
><arg choice="opt"><replaceable>mm</replaceable
><arg choice="opt"><replaceable>dd</replaceable
></arg></arg></arg>
            <arg choice="opt"><replaceable>volume</replaceable
> <arg choice="opt"><replaceable>issue</replaceable
> <arg choice="opt"><replaceable>page</replaceable
></arg></arg></arg>
          </cmdsynopsis>
        </blockquote>
        <para>
          The recommended solution is to specify variable-length arguments
          directly, including square brackets:
        </para>
        <programlisting><![CDATA[
<cmdsynopsis>
  <command>qux</command>
  <arg choice="plain">[+<replaceable>yyyy</replaceable
>[<replaceable>mm</replaceable
>[<replaceable>dd</replaceable
>]]]</arg>
  <arg choice="opt"><replaceable>volume</replaceable
> <arg choice="opt"><replaceable>issue</replaceable
> <arg choice="opt"><replaceable>page</replaceable
></arg></arg></arg>
</cmdsynopsis>
]]></programlisting>
        <blockquote>
          <cmdsynopsis>
            <command>qux</command>
            <arg choice="plain">[+<replaceable>yyyy</replaceable
>[<replaceable>mm</replaceable
>[<replaceable>dd</replaceable
>]]]</arg>
            <arg choice="opt"><replaceable>volume</replaceable
> <arg choice="opt"><replaceable>issue</replaceable
> <arg choice="opt"><replaceable>page</replaceable
></arg></arg></arg>
          </cmdsynopsis>
        </blockquote>
      </example>

    </section>

    <section xml:id="cookbook-classdocumentation">
    
      <title>Class Documentation</title>
      
      <para>
        DocBook offers rich structured markup to document object-oriented
        classes, with the <tag>classsynopsis</tag> construct. It consists of:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            A class declaration or interface declaration or exception
            declaration. This consists of a <tag>ooclass</tag> or
            <tag>oointerface</tag> or <tag>ooexception</tag> tag (respectively),
            containing zero or more <tag>modifier</tag> tags (e.g.
            <code><![CDATA[<modifier>protected</modifier>]]></code>) and
            a <tag>classname</tag> or <tag>interfacename</tag> or
            <tag>exceptionname</tag> tag (respectively). 
          </para>
        </listitem>
        <listitem>
          <para>
            Any number of field, method, constructor or destructor declarations,
            denoted by <tag>fieldsynopsis</tag>,
            <tag>methodsynopsis</tag>, <tag>constructorsynopsis</tag> or
            <tag>destructorsynopsis</tag> (respectively).  
          </para>
        </listitem>
      </itemizedlist>
      <para>
        A field synopsis consists of zero or more <tag>modifier</tag> tags,
        an optional <tag>type</tag> tag, a <tag>varname</tag> tag for the name
        of the field, and an optional <tag>initializer</tag> tag containing
        arbitrary content (probably a <tag>code</tag> blurb) denoting the
        initial value of the field.
      </para>
      <para>
        A method synopsis consists of zero or more <tag>modifier</tag> tags,
        optionally a <tag>type</tag> tag or the
        <tag class="emptytag">void</tag> empty tag for the return type, a
        <tag>methodname</tag> tag, one or more <tag>methodparam</tag> constructs
        for the parameters or <tag class="emptytag">void</tag> if none, and zero
        or more <tag>exceptionname</tag> tags for exceptions thrown. A
        constructor or destructor synopsis is the same, except that there is
        no return type and the method name is optional. 
      </para>
      <para>
        A <tag>methodparam</tag> construct consists of zero or more
        <tag>modifier</tag> tags, an optional <tag>type</tag> tag, and a
        <tag>parameter</tag> tag.
      </para>
      <example>
        <title><tag>classsynopsis</tag> example</title>
        <blockquote>
          <classsynopsis language="java">
            <ooclass>
              <modifier>public</modifier>
              <classname>Foo</classname>
            </ooclass>
            <ooclass>
              <classname>AbstractFoo</classname>
            </ooclass>
            <oointerface>
              <interfacename>FooObserver</interfacename>
            </oointerface>
            <fieldsynopsis>
              <modifier>private</modifier>
              <modifier>static</modifier>
              <modifier>final</modifier>
              <type>AbstractFoo</type>
              <varname>singleton</varname>
            </fieldsynopsis>
            <methodsynopsis>
              <modifier>public</modifier>
              <modifier>static</modifier>
              <type>AbstractFoo</type>
              <methodname>getInstance</methodname>
              <methodparam>
                <type>int</type>
                <parameter>x</parameter>
              </methodparam>
              <exceptionname>NoClassDefFoundError</exceptionname>
            </methodsynopsis>
          </classsynopsis>
        </blockquote>
      </example>
      
    </section>

  </section>

  <appendix xml:id="elementreference">

    <title>Element Reference</title>

    <para>The full DocBook element reference (fairly well organized) can be found here: <link xlink:href="http://docbook.org/tdg5/en/html/chunk-part-d64e8789.html" /></para>

  </appendix>

</article>
